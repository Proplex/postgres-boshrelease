# pgpool configuration
<%
  config = p('pgpool.config', {})
  config['listen_addresses'] ||= '*'
  config['port']             ||= 5432
  config['pcp_port']         ||= 9898
  # FIXME: support for SSL key?

  backends = link("db").instances
  if backends.empty? then
    raise "pgpool.backend.hosts property must define at least one postgres backend host!"
  end

  def val(v)
    return case
      when v == true;    "on"
      when v == false;   "off"
      when v.to_i == v;  "#{v}"
      else;              "'#{v}'"
    end
  end
%>
socket_dir                = '/var/vcap/sys/run/pgpool'
pcp_socket_dir            = '/var/vcap/sys/run/pgpool'
listen_backlog_multiplier = 2
serialize_accept          = on
pid_file_name             = '/var/vcap/sys/run/pgpool/pgpool.pid'
logdir                    = '/var/vcap/sys/log/pgpool'
log_line_prefix           = '%t %a %P[%p] %u@%d: '

connection_cache          = on
reset_query_list          = 'ABORT; DISCARD ALL'
pool_passwd               = 'passwd'
master_slave_mode         = on
master_slave_sub_mode     = 'stream'
health_check_period       = 30
health_check_user         = 'vcap'
health_check_password     = ''
failover_command          = '/var/vcap/jobs/postgres/bin/failover'
sr_check_period = 0
                                   # Streaming replication check period
                                   # Disabled (0) by default
sr_check_user = 'vcap'
                                   # Streaming replication check user
                                   # This is necessary even if you disable
                                   # streaming replication delay check with
                                   # sr_check_period = 0
sr_check_password = ''
                                   # Password for streaming replication check user
delay_threshold = 0
                                   # Threshold before not dispatching query to standby node
                                   # Unit is in bytes
                                   # Disabled (0) by default
recovery_user = 'vcap'
                                   # Online recovery user
recovery_password = ''
                                   # Online recovery password
recovery_1st_stage_command = '/var/vcap/jobs/pgpool/bin/online-recovery.sh'
                                   # Executes a command in first stage
recovery_2nd_stage_command = ''
                                   # Executes a command in second stage
recovery_timeout = 30
                                   # Timeout in seconds to wait for the
                                   # recovering node's postmaster to start up
                                   # 0 means no wait
client_idle_limit_in_recovery = 0
                                   # Client is disconnected after being idle
                                   # for that many seconds in the second stage
                                   # of online recovery
                                   # 0 means no disconnection
                                   # -1 means immediate disconnection
                                   # Activate replication mode
                                   # (change requires restart)
replicate_select = off
                                   # Replicate SELECT statements
                                   # when in replication or parallel mode
                                   # replicate_select is higher priority than
                                   # load_balance_mode.

insert_lock = off
                                   # Automatically locks a dummy row or a table
                                     # with INSERT statements to keep SERIAL data
                                   # consistency
                                   # Without SERIAL, no lock will be issued
lobj_lock_table = ''
                                   # When rewriting lo_creat command in
                                   # replication mode, specify table name to
                                   # lock
# - Degenerate handling -

replication_stop_on_mismatch = off
                                   # On disagreement with the packet kind
                                   # sent from backend, degenerate the node
                                   # which is most likely "minority"
                                   # If off, just force to exit this session

failover_if_affected_tuples_mismatch = off
                                   # On disagreement with the number of affected
                                   # tuples in UPDATE/DELETE queries, then
                                   # degenerate the node which is most likely
                                   # "minority".
                                   # If off, just abort the transaction to
                                   # keep the consistency
master_slave_mode = on
                                   # Activate master/slave mode
                                   # (change requires restart)
master_slave_sub_mode = 'stream'
                                   # Master/slave sub mode
                                   # Valid values are combinations slony or
                                   # stream. Default is slony.
                                   # (change requires restart)
follow_master_command = 'echo %M > /tmp/postgres_master'
                                   # Executes this command after master failover
                                   # Special values:
                                   #   %d = node id
                                   #   %h = host name
                                   #   %p = port number
                                   #   %D = database cluster path
                                   #   %m = new master node id
                                   #   %H = hostname of the new master node
                                   #   %M = old master node id
                                   #   %P = old primary node id
                                   #   %% = '%' character

<% link("db").instances.each_with_index do |instance, i| %>
backend_hostname<%= i %> = <%= val(instance.address) %>
backend_port<%= i %> = <%= val(p('pgpool.backend.port')) %>
backend_data_directory<%= i %> = '/var/vcap/store/postgres/db/'
<% end %>

###
<% config.each do |key, value|
%><%= key %> = <%= val(value) %>
<% end %>
